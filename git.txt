配置:
git config user.name "Your Name"
git config user.email "email@xx.com"

git config --list 查看当前配置

初始化一个Git仓库，使用git init命令。

添加文件到Git仓库，分两步：

第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；:git add readme.txt

第二步，使用命令git commit，完成。: git commit -m "wrote a readme file"

要随时掌握工作区的状态，使用git status命令。

如果git status告诉你有文件被修改过，用git diff可以查看修改内容:git diff readme.txt 

cat readme.txt 查看文档内容

HEAD指向的版本就是当前版本（上一个版本是HEAD^，上上一个版本是HEAD^^，HEAD~100上100个版本），因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

git checkout -- readme.txt把readme.txt文件在工作区的修改全部撤销回到最近一次git commit或git add时的状态。

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，git reset --hard HEAD^，不过前提是没有推送到远程库

rm命令删除文件 从版本库中删除该文件 用命令git rm删掉，并且git commit  删错了 git checkout -- test.txt

第一次：要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

git remote rm origin  删除 远程连接

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
git push origin master 把本地master分支的最新修改推送至GitHub

git clone git@github.com:michaelliao/gitskills.git 克隆一个本地库

git checkout -b dev：创建dev分支，然后切换到dev分支

git branch命令会列出所有分支，当前分支前面会标一个*号

切换回master分支：git checkout master

把dev分支的工作成果合并到master分支上：git merge dev

地删除dev：git branch -d dev


查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>   快速合并，看不出来曾经做过合并

删除分支：git branch -d <name>


git log --graph --pretty=oneline --abbrev-commit（git log --graph命令）看到分支合并图


普通合并 git merge --no-ff -m "merge with no-ff" dev 能看出来曾经做过合并

修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；

当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场

git branch -D <name>强行删除一个没有被合并过的分支

要查看远程库的信息，用git remote，git remote -v显示更详细的信息：

小伙伴在dev分支上开发：先克隆git clone git@github.com:michaelliao/learngit.git
再 git checkout -b dev origin/dev创建本地dev分支，就可以在dev上继续修改，然后，时不时地把dev分支push到远程
推送失败用git pull把最新的提交从origin/dev抓下来，解决冲突，解决后，提交，再push


多人协作的工作模式通常是这样：

首先，可以试图用git push origin branch-name推送自己的修改；

如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

如果合并有冲突，则解决冲突，并在本地提交；

没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！

如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。

找到历史提交的commit id：git log --pretty=oneline --abbrev-commit

命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；

git tag -a <tagname> -m "blablabla..."可以指定标签信息；

git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；

命令git tag可以查看所有标签。查看标签内容：git show <tagname>

命令git push origin <tagname>可以推送一个本地标签；

命令git push origin --tags可以推送全部未推送过的本地标签；

命令git tag -d <tagname>可以删除一个本地标签；

命令git push origin :refs/tags/<tagname>可以删除一个远程标签。

.gitignore文件:忽略文件，
原则是：
忽略操作系统自动生成的文件，比如缩略图等；
忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。

$ git config --global alias.st status 起别名 

搭建服务器：https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000
